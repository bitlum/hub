# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import protobuf.rpc_pb2 as rpc__pb2


class EmulatorStub(object):
  """Emulator grpc service is used as an controling point for external emulation
  subsystem which generate the user activity and sends it to our emulation
  network.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SendPayment = channel.unary_unary(
        '/emulation.Emulator/SendPayment',
        request_serializer=rpc__pb2.SendPaymentRequest.SerializeToString,
        response_deserializer=rpc__pb2.SendPaymentResponse.FromString,
        )
    self.OpenChannel = channel.unary_unary(
        '/emulation.Emulator/OpenChannel',
        request_serializer=rpc__pb2.OpenChannelRequest.SerializeToString,
        response_deserializer=rpc__pb2.OpenChannelResponse.FromString,
        )
    self.CloseChannel = channel.unary_unary(
        '/emulation.Emulator/CloseChannel',
        request_serializer=rpc__pb2.CloseChannelRequest.SerializeToString,
        response_deserializer=rpc__pb2.CloseChannelResponse.FromString,
        )


class EmulatorServicer(object):
  """Emulator grpc service is used as an controling point for external emulation
  subsystem which generate the user activity and sends it to our emulation
  network.
  """

  def SendPayment(self, request, context):
    """
    SendPayment is used to emulate the activity of one user sending payment
    to another within the local router network.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def OpenChannel(self, request, context):
    """
    OpenChannel is used to emulate that user has opened the channel with the
    router.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CloseChannel(self, request, context):
    """
    CloseChannel is used to emulate that user has closed the channel with the
    router.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EmulatorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SendPayment': grpc.unary_unary_rpc_method_handler(
          servicer.SendPayment,
          request_deserializer=rpc__pb2.SendPaymentRequest.FromString,
          response_serializer=rpc__pb2.SendPaymentResponse.SerializeToString,
      ),
      'OpenChannel': grpc.unary_unary_rpc_method_handler(
          servicer.OpenChannel,
          request_deserializer=rpc__pb2.OpenChannelRequest.FromString,
          response_serializer=rpc__pb2.OpenChannelResponse.SerializeToString,
      ),
      'CloseChannel': grpc.unary_unary_rpc_method_handler(
          servicer.CloseChannel,
          request_deserializer=rpc__pb2.CloseChannelRequest.FromString,
          response_serializer=rpc__pb2.CloseChannelResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'emulation.Emulator', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
