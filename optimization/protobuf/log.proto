syntax = "proto3";

package logger;

// Log is the main object in the file which represent the log entry in the
// log file.
message Log {
    int64 time = 1;

    oneof data {
        RouterState state = 2;
        Payment payment = 3;
        ChannelChange channel_change = 4;
    }
}

// RouterState is a type of log entry which describes the state/view of the
// router local lightning network and number of free funds which exist under
// control router.
message RouterState {
    // Channels represent the local lightning network topology.
    repeated Channel channels = 1;

    // FreeBalance it is free number of funds under router managment which
    // could be used to lock them in the channels.
    uint64 free_balance = 2;
}

// Channel is used as the building block in describing of the lightning
// network topology.
message Channel {
    uint64 user_id = 1;
    uint64 channel_id = 2;
    uint64 user_balance = 3;
    uint64 router_balance = 4;
}

// Payment represent the attempt of peer in the local lightning network to
// send the payment to some another peer in the network.
message Payment {
    PaymentStatus status = 1;

    uint64 sender = 2;
    uint64 receiver = 3;
    uint64 amount = 5;

    // Earned is the number of funds which router earned by making this payment.
    // In case of rebalncing router will pay the fee, for that reason this
    // number will be negative.
    int64 earned = 6;
}

enum PaymentStatus {
    success = 0;

    // UnsufficientFunds means that router haven't posses/locked enough funds
    // with receiver user to route thouth the payment.
    unsufficient_funds = 1;

    // ExternalFail means that receiver failed to receive payment because of
    // the unknown to us reason.
    external_fail = 2;
}

message ChannelChange {
    ChannelChangeType type = 1;

    uint64 user_id = 2;
    uint64 channel_id = 3;

    uint64 user_balance = 4;
    uint64 router_balance = 5;

    // Fee which was taken by blockchain decentrilized computer / mainers or
    // some other form of smart contract manager.
    uint64 fee = 6;
}

// ChannelChangeType represent the type of action which were attempted to
// apply to the channel.
enum ChannelChangeType {
    // Open is used when this channel was just created, and haven't been in
    // local network before
    open = 0;

    // Close is used when number locked funds / balances of both channel
    // participant equal to zero.
    close = 1;

    // Udpate is used when one of the participants decides to update its
    // channel balance.
    udpate = 2;
}